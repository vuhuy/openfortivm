#!/bin/sh
#
# Creates APK overlay and build ISO image. Cannot run as root.
# Usage: doas -u build sh build-image.sh $ABUILD_WORKING_DIRECTORY $ALPINE_RELEASE_VERSION
#


# Move to build directory
cd $1

# Create ovmt profile (virt + openfortivpn + open-vm-tools)
cat << 'EOF' > aports/scripts/mkimg.vpnovmt.sh
profile_vpnovmt() {
	profile_standard
	profile_abbrev="vpnovmt"
	title="openfortivm"
	desc="Similar to standard.
		Slimmed down kernel.
		Optimized for virtual systems.
		Configured for openfortivm."
	arch="x86_64"
	kernel_addons=
	kernel_flavors="virt"
	apks="$apks open-vm-tools open-vm-tools-guestinfo open-vm-tools-deploypkg iptables ppp agetty doas tiny-cloud-nocloud openfortivm-conf openfortivm-vpn openfortivm-status"
	apkovl="aports/scripts/genapkovl-vpnovmt.sh"
}
EOF
chmod +x aports/scripts/mkimg.vpnovmt.sh

# Create virt profile (virt + open-vm-tools)
cp aports/scripts/mkimg.vpnovmt.sh aports/scripts/mkimg.vpnvirt.sh
sed -i 's/vpnovmt/vpnvirt/g' aports/scripts/mkimg.vpnvirt.sh
sed -i 's/open-vm-tools open-vm-tools-guestinfo open-vm-tools-deploypkg //g' aports/scripts/mkimg.vpnvirt.sh

# Create ovmt overlay
cat << 'END' > aports/scripts/genapkovl-vpnovmt.sh
#!/bin/sh -e

HOSTNAME="$1"
if [ -z "$HOSTNAME" ]; then
	echo "usage: $0 hostname"
	exit 1
fi

cleanup() {
	rm -rf "$tmp"
}

makefile() {
	OWNER="$1"
	PERMS="$2"
	FILENAME="$3"
	cat > "$FILENAME"
	chown "$OWNER" "$FILENAME"
	chmod "$PERMS" "$FILENAME"
}

rc_add() {
	mkdir -p "$tmp"/etc/runlevels/"$2"
	ln -sf /etc/init.d/"$1" "$tmp"/etc/runlevels/"$2"/"$1"
}

tmp="$(mktemp -d)"
trap cleanup EXIT

mkdir -p "$tmp"/etc
makefile root:root 0644 "$tmp"/etc/hostname <<'EOF'
openfortivm
EOF

makefile root:root 0644 "$tmp"/etc/inittab <<'EOF'
# /etc/inittab

::sysinit:/sbin/openrc sysinit
::sysinit:/sbin/openrc boot
::wait:/sbin/openrc default

# Set up a couple of getty's
tty1::respawn:/sbin/getty 38400 tty1
tty2::respawn:/sbin/getty 38400 tty2
tty3::respawn:/sbin/getty 38400 tty3
tty4::respawn:/sbin/getty 38400 tty4
tty5::respawn:/sbin/getty 38400 tty5
tty6::respawn:/sbin/getty 38400 tty6

# Put a getty on the serial port
ttyS0::respawn:/sbin/agetty -L 115200 ttyS0 vt100

# Stuff to do for the 3-finger salute
::ctrlaltdel:/sbin/reboot

# Stuff to do before rebooting
::shutdown:/sbin/openrc shutdown

EOF

makefile root:root 0644 "$tmp"/etc/motd <<'EOF'
Welcome to openfortivm!

Openfortivm runs on Alpine Linux, a security-oriented, lightweight
Linux distribution. The Alpine Wiki contains a large amount of how-to
guides and general information about administrating Alpine systems.
See <https://wiki.alpinelinux.org/>.

You can setup the system with the command 'setup-openfortivm', and
connect and manage VPN profiles with the command 'vpn-menu'. Visit
the openfortivm GitHub page for more information about configuring
the system and managing VPN connection. See
<https://github.com/vuhuy/openfortivm>.

EOF

makefile root:root 0644 "$tmp"/etc/sysctl.conf <<'EOF'
# content of this file will override /etc/sysctl.d/*
net.ipv4.ip_forward = 1
EOF

mkdir -p "$tmp"/etc/apk
makefile root:root 0644 "$tmp"/etc/apk/world <<'EOF'
alpine-base
open-vm-tools
open-vm-tools-guestinfo
open-vm-tools-deploypkg
iptables
ppp
agetty
doas
openfortivm-conf
openfortivm-vpn
openfortivm-status
EOF

mkdir -p "$tmp"/etc/doas.d
makefile root:root 0644 "$tmp"/etc/doas.d/doas.conf <<'EOF'
permit nopass root as root cmd /usr/bin/openfortivpn
permit nopass vpnuser as root cmd /usr/bin/openfortivpn
permit nopass root as root cmd openfortivpn
permit nopass vpnuser as root cmd openfortivpn
permit nopass vpnuser as root cmd reboot
permit nopass vpnuser as root cmd poweroff
EOF

mkdir -p "$tmp"/etc/iptables
makefile root:root 0600 "$tmp"/etc/iptables/rules-save <<'EOF'
# Generated by iptables-save v1.8.10 (nf_tables) on Mon Nov  4 00:00:00 2024
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
[0:0] -A INPUT -i lo -j ACCEPT
[0:0] -A INPUT -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j DROP
[0:0] -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG FIN,SYN,RST,PSH,ACK,URG -j DROP
[0:0] -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
[0:0] -A INPUT -m state --state INVALID -j DROP
[0:0] -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
[0:0] -A INPUT -i eth1 -p udp -m udp --sport 67:68 --dport 67:68 -j ACCEPT
[0:0] -A INPUT -i eth0 -p icmp -m state --state NEW -j ACCEPT
[0:0] -A INPUT -i eth1 -p icmp -m state --state NEW -j ACCEPT
[0:0] -A INPUT -i eth1 -p tcp -m tcp --dport 8080 -m state --state NEW -j ACCEPT
[0:0] -A FORWARD -m state --state INVALID -j DROP
[0:0] -A FORWARD -i eth1 -j ACCEPT
[0:0] -A FORWARD -i ppp0 -j ACCEPT
[0:0] -A OUTPUT -m state --state INVALID -j DROP
COMMIT
# Completed on Mon Nov  4 03:08:13 2024
# Generated by iptables-save v1.8.10 (nf_tables) on Mon Nov  4 00:00:00 2024
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
[0:0] -A POSTROUTING -o ppp0 -j MASQUERADE
COMMIT
# Completed on Mon Nov  4 03:08:13 2024
EOF

mkdir -p "$tmp"/etc/modules-load.d
makefile root:root 0644 "$tmp"/etc/modules-load.d/ppp.conf <<'EOF'
ppp_generic
EOF

rc_add devfs sysinit
rc_add dmesg sysinit
rc_add mdev sysinit
rc_add hwdrivers sysinit
rc_add modloop sysinit

rc_add hwclock boot
rc_add modules boot
rc_add sysctl boot
rc_add hostname boot
rc_add bootmisc boot
rc_add syslog boot

rc_add mount-ro shutdown
rc_add killprocs shutdown
rc_add savecache shutdown

rc_add open-vm-tools boot
rc_add iptables default

tar -c -C "$tmp" etc | gzip -9n > \$HOSTNAME.apkovl.tar.gz
END
chmod +x aports/scripts/genapkovl-vpnovmt.sh

# Create virt overlay
cp aports/scripts/genapkovl-vpnovmt.sh aports/scripts/genapkovl-vpnvirt.sh
sed -i 's/vpnovmt/vpnvirt/g' aports/scripts/mkimg.vpnvirt.sh
sed -i '/open-vm-tools/d' aports/scripts/genapkovl-vpnvirt.sh

# Build ovmt image
alpine_repo_version=$(echo "$2" | cut -d '.' -f1,2)
export output_filename="openfortivm-ovmt.iso"
sh aports/scripts/mkimage.sh --tag v$2 \
	--outdir iso \
	--arch x86_64 \
	--repository https://dl-cdn.alpinelinux.org/alpine/v${alpine_repo_version}/main \
	--repository https://dl-cdn.alpinelinux.org/alpine/v${alpine_repo_version}/community \
	--repository packages/testing \
	--profile vpnovmt

# Build virt image
export output_filename="openfortivm-virt.iso"
sh aports/scripts/mkimage.sh --tag v$2 \
	--outdir iso \
	--arch x86_64 \
	--repository https://dl-cdn.alpinelinux.org/alpine/v${alpine_repo_version}/main \
	--repository https://dl-cdn.alpinelinux.org/alpine/v${alpine_repo_version}/community \
	--repository packages/testing \
	--profile vpnvirt
